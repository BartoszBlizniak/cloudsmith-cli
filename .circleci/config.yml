# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

jobs:
  publish:
    docker:
      - image: cimg/python:3.9
    parameters:
      registry_url:
        description: Registry URL to upload the CLI to
        type: string
        default: https://upload.pypi.org/legacy/
      username:
        description: Twine username
        type: string
      password:
        description: Twine password
        type: string
    steps:
      - checkout
      - run: pip install --user --upgrade setuptools twine wheel
      - run: |
          python setup.py bdist_wheel
          twine upload --repository-url <<parameters.registry_url>> --username <<parameters.username>> --password <<parameters.password>> --verbose dist/*

orbs:
  cloudsmith_ci:
    jobs:
      execute:
        parameters:
          service_name:
            description: Name of the command to execute
            type: string
          command:
            description: The command to execute
            type: string
          no_output_timeout:
            description: Number of seconds to let job run without output before timeout
            type: integer
            default: 600
          is_test_suite:
            description: Should the job collect test results and coverage?
            type: boolean
            default: false
          version:
            description: "Python version"
            type: string
            default: "3.6"
          requirements_file:
            description: The requirements.txt to use
            type: string
            default: "requirements/development.py3.txt"
        executor:
          name: cloudsmith_executor
          version: <<parameters.version>>
        working_directory: ~/repo
        steps:
          - checkout
          - restore_cache:
              keys:
                - v1-dependencies-<<parameters.version>>-{{ checksum "requirements/development.py3.txt" }}
          - run:
              name: Install dependencies
              command: |
                pip install -U pip
                pip install -U virtualenv
                python -m virtualenv .venv
                . .venv/bin/activate
                pip install -U pip wheel
                pip install -r <<parameters.requirements_file>>
          - when:
              condition: <<parameters.is_test_suite>>
              steps:
                - run:
                    name: Setup Code Climate coverage reporter
                    command: |
                      test "$CIRCLE_LOCAL" == "true" || {
                        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter;
                        chmod +x ./cc-test-reporter;
                      }
                - run:
                    name: Notify Code Climate of pending test report
                    command:
                      test "$CIRCLE_LOCAL" == "true" || {
                        ./cc-test-reporter before-build;
                      }
          - save_cache:
              paths:
                - .venv
              key: v1-dependencies-<<parameters.version>>-{{ checksum "requirements/development.py3.txt" }}
          - run:
              name: Run <<parameters.service_name>>
              command: |
                . .venv/bin/activate
                <<parameters.command>>
                echo $? > /tmp/run_exit_code
              no_output_timeout: <<parameters.no_output_timeout>>
          - when:
              condition: <<parameters.is_test_suite>>
              steps:
                - store_test_results:
                    path: ./reports
                - store_artifacts:
                    path: ./reports
                - deploy:
                    command: |
                      test "$CIRCLE_LOCAL" == "true" || {
                        . .venv/bin/activate
                        cp ./reports/coverage.xml .;
                        ./cc-test-reporter after-build -t coverage.py --exit-code $(cat /tmp/run_exit_code);
                      }

    executors:
      cloudsmith_executor:
        parameters:
          version:
            description: "Python version"
            type: string
            default: "3.6"
        docker:
          - image: cimg/python:<<parameters.version>>


workflows:
  commit:
    jobs:
      - cloudsmith_ci/execute:
          name: isort
          service_name: isort
          command: isort -rc -c
      - cloudsmith_ci/execute:
          name: black
          service_name: black
          command: pre-commit run -a black
      - cloudsmith_ci/execute:
          name: flake8
          service_name: flake8
          command: flake8
      - cloudsmith_ci/execute:
          name: pylint
          service_name: pylint
          command: pylint --rcfile=.pylintrc cloudsmith_cli
          no_output_timeout: 1200
      - cloudsmith_ci/execute:
          name: pytest-2.7
          service_name: pytest-2.7
          command: pytest --cov-report xml:./reports/coverage.xml --junitxml ./reports/pytest.xml
          version: "2.7"
          requirements_file: "requirements/development.py2.txt"
      - cloudsmith_ci/execute:
          name: pytest-3.5
          service_name: pytest-3.5
          command: pytest --cov-report xml:./reports/coverage.xml --junitxml ./reports/pytest.xml
          version: "3.5"
      - cloudsmith_ci/execute:
          name: pytest-3.6
          service_name: pytest-3.6
          command: pytest --cov-report xml:./reports/coverage.xml --junitxml ./reports/pytest.xml
          version: "3.6"
          is_test_suite: true
      - cloudsmith_ci/execute:
          name: pytest-3.7
          service_name: pytest-3.7
          command: pytest --cov-report xml:./reports/coverage.xml --junitxml ./reports/pytest.xml
          version: "3.7"
      - cloudsmith_ci/execute:
          name: pytest-3.8
          service_name: pytest-3.8
          command: pytest --cov-report xml:./reports/coverage.xml --junitxml ./reports/pytest.xml
          version: "3.8"
      - cloudsmith_ci/execute:
          name: pytest-3.9
          service_name: pytest-3.9
          command: pytest --cov-report xml:./reports/coverage.xml --junitxml ./reports/pytest.xml
          version: "3.9"
      - cloudsmith_ci/execute:
          name: pytest-3.10
          service_name: pytest-3.10
          command: pytest --cov-report xml:./reports/coverage.xml --junitxml ./reports/pytest.xml
          version: "3.10"
      - cloudsmith_ci/execute:
          name: pytest-3.11
          service_name: pytest=3.11
          command: pytest --cov-report xml:./reports/coverage.xml --junitxml ./reports/pytest.xml
          version: "3.11"
      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          name: cloudsmith
          registry_url: https://python.cloudsmith.io/cloudsmith/cli/
          username: $CLOUDSMITH_USERNAME
          password: $CLOUDSMITH_PASSWORD
      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          name: pypi
          username: $PYPI_USERNAME
          password: $PYPI_PASSWORD
